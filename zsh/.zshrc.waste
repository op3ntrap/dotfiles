#--------------------------------------------------------------------------------------------------------------------
###FASD
# eval "$(fasd --init posix-alias zsh-hook)"

###ENHANCD
# [ -f ~/.zsh/enhancd/./init.sh ] && source ~/.zsh/enhancd/./init.sh

#  fzf_history() { 
#    zle -I; eval $(history | fzf +s | sed 's/ *[0-9]* *//') ; }
#  zle -N fzf_history
#  bindkey '^H' fzf_killps
#  bindkey -M vicmd '^H' fzf_killps
#
#  fzf_killps() { 
#    zle -I; ps -ef | sed 1d | fzf -m | awk '{print $2}' | xargs kill -${1:-9} ; }
#    zle -N fzf_killps
#  bindkey '^X' fzf_killps
#  bindkey -M vicmd '^X' fzf_killps

#  fzf_cd() { 
#    zle -I; DIR=$(find ${1:-*} -path '*/\.*' -prune -o -type d -print 2> /dev/null | fzf) && cd "$DIR" ; }
#    zle -N fzf_cd
#  bindkey '^E' fzf_cd
#  bindkey -M vicmd '^E' fzf_cd
#    
#  fzf_locate() {
#    zle -I; xdg-open "$(locate "*" | fzf -e)" ;}
#    zle -N fzf_locate
#  bindkey '^L' fzf_locate
#  bindkey -M vicmd '^L' fzf_locate


#  fzf-file() {
#    LBUFFER="${LBUFFER}$(__fsel)"
#    local ret=$?
#    zle redisplay; typeset -f zle-line-init >/dev/null && zle zle-line-init; return $ret}
#    zle -N   fzf-file
#  bindkey '^P' fzf-file
##  bindkey -M vicmd '^P' fzf-file



#--------------------------------------------------------------------------------------------------------------------
###VI MODE  -- [Disabled: Just a Dummy Config]
#bindkey -v
#KEYTIMEOUT=1
#function zle-line-init zle-keymap-select {
#    RPS1="${${KEYMAP/vicmd/-- NORMAL --}/(main|viins)/-- INSERT --}"
#    RPS2=$RPS1
#    zle reset-prompt
#}
#zle -N zle-line-init
#zle -N zle-keymap-select

#bindkey -a u undo
#bindkey -a '^T' redo
#bindkey '^?' backward-delete-char
#bindkey -M viins '^r' history-incremental-search-backward
#bindkey -M vicmd '^r' history-incremental-search-backward


  #--------------------------------------------------------------------------------------------------------------------
  # Double press [Esc] [Esc] to add last command sudo
#  sudo-command-line() {
#      [[ -z $BUFFER ]] && zle up-history
#      if [[ $BUFFER == sudo\ * ]]; then
#          LBUFFER="${LBUFFER#sudo }"
#      elif [[ $BUFFER == $EDITOR\ * ]]; then
#          LBUFFER="${LBUFFER#$EDITOR }"
#          LBUFFER="sudoedit $LBUFFER"
#      elif [[ $BUFFER == sudoedit\ * ]]; then
#          LBUFFER="${LBUFFER#sudoedit }"
#          LBUFFER="$EDITOR $LBUFFER"
#      else
#          LBUFFER="sudo $LBUFFER"
#      fi
#  }
#  zle -N sudo-command-line
#  bindkey -M vicmd "\e\e" sudo-command-line

#--------------------------------------------------------------------------------------------------------------------
###MODULES COPIED !!!!! 
# source ~/.zsh/texas_init.zsh
# source ~/.zsh/theme.sh
# source ~/.zsh/extract.plugin.zsh
# source ~/.zsh/zsh-syntax-highlighting.zsh
# source ~/.zsh/zsh-history-substring-search.zsh
# source ~/.zsh/zsh-miscellaneous.zsh

#--------------------------------------------------------------------------------------------------------------------

#--------------------------------------------------------------------------------------------------------------------
# Prompt (on left side) similar to default bash prompt, or redhat zsh prompt with colors
#PROMPT="%(!.%{$fg[red]%}[%n@%m %1~]%{$reset_color%}# .%{$fg[green]%}[%n@%m %1~]%{$reset_color%}$ "
# Maia prompt
# PROMPT="%B%{$fg[cyan]%}%(4~|%-1~/.../%2~|%~)%u%b >%{$fg[cyan]%}>%B%(?.%{$fg[cyan]%}.%{$fg[red]%})>%{$reset_color%}%b " # Print some system information when the shell is first started
# Print a greeting message when shell is started
# echo $USER@$HOST  $(uname -srm) $(lsb_release -rcs)
## Prompt on right side:
#  - shows status of git when in git repository (code adapted from https://techanic.net/2012/12/30/my_git_prompt_for_zsh.html)
#  - shows exit status of previous command (if previous command finished with an error)
#  - is invisible, if neither is the case

#bindkey "$terminfo[kcuu1]" history-substring-search-up
#bindkey "$terminfo[kcud1]" history-substring-search-down
#bindkey '^[[A' history-substring-search-up			
#bindkey '^[[B' history-substring-search-down
#bindkey '^X^E' edit-command-line
#case $(basename "$(cat "/proc/$PPID/comm")") in
#  login)
#	RPROMPT="%{$fg[red]%} %(?..[%?])" 
#	alias x='startx ~/.xinitrc'      # Type name of desired desktop after x, xinitrc is configured for it
#    ;;
#  urxvt)
#	RPROMPT='$(git_prompt_string)'
#	# Use autosuggestion
#	source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
#	ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
#	ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=8'
#    ;;
#  konsole|qterminal)
#	RPROMPT='$(git_prompt_string)'
#    ;;   
#  'tmux: server')
#	if $(ps -p$PPID| grep -q -e konsole -e qterminal); then
#	RPROMPT='$(git_prompt_string)'
#    else
#	RPROMPT='$(git_prompt_string)'
#		## Base16 Shell color themes.
#		#possible themes: 3024, apathy, ashes, atelierdune, atelierforest, atelierhearth,
#		#atelierseaside, bespin, brewer, chalk, codeschool, colors, default, eighties, 
#		#embers, flat, google, grayscale, greenscreen, harmonic16, isotope, londontube,
#		#marrakesh, mocha, monokai, ocean, paraiso, pop (dark only), railscasts, shapesifter,
#		#solarized, summerfruit, tomorrow, twilight
#		#theme="eighties"
#		#Possible variants: dark and light
#		#shade="dark"
#		#BASE16_SHELL="/usr/share/zsh/scripts/base16-shell/base16-$theme.$shade.sh"
#		#[[ -s $BASE16_SHELL ]] && source $BASE16_SHELL
#		# Use autosuggestion
#		source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
#		ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
#	ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=8'
#	fi
#    ;;
#  *)
#	if $(ps -p$PPID| grep -q -e konsole -e qterminal); then
#	RPROMPT='$(git_prompt_string)'
#    else
#	RPROMPT='$(git_prompt_string)'
#		# Use autosuggestion
#		source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
#		ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
#	ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=8'
#	fi
#    ;;
#esac
# Right prompt with exit status of previous command if not successful
 #RPROMPT="%{$fg[red]%} %(?..[%?])" 
# Right prompt with exit status of previous command marked with ✓ or ✗
 #RPROMPT="%(?.%{$fg[green]%}✓ %{$reset_color%}.%{$fg[red]%}✗ %{$reset_color%})"


